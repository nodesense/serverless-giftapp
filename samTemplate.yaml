AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Outputs the time

Globals:

  Function:
    Runtime: nodejs8.10

    Environment:
      Variables:
        APP_NAME: GiftApp

  Api:
    # enable CORS; to make more specific, change the origin wildcard
    # to a particular domain name, e.g. "'www.example.com'"
    # Cors:
    #  AllowMethods: "'*'"
    #  AllowHeaders: "'*'"
    #  AllowOrigin: "'*'"
    #Cors: "'http://localhost:3000'"
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"

    EndpointConfiguration: REGIONAL


Resources:


  HelloFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: HelloLambdaFunction
      Handler: hello.handler
      Runtime: nodejs8.10
      CodeUri: ./
      Policies: AmazonDynamoDBFullAccess
      Events:
        HelloGetApi:
          Type: Api
          Properties:
            Path: /hello
            Method: GET
        HelloPostApi:
          Type: Api
          Properties:
            Path: /hello
            Method: POST
        HelloPutApi:
          Type: Api
          Properties:
            Path: /hello
            Method: PUT
        HelloDeleteApi:
          Type: Api
          Properties:
            Path: /hello
            Method: DELETE
            
  GetMoviesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetMoviesFunction
      Handler: lambdas/movies/getMovies.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetMoviesApi:
          Type: Api
          Properties:
            Path: /movies
            Method: GET

  GetMovieFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetMovieFunction
      Handler: lambdas/movies/getMovie.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetMovieApi:
          Type: Api
          Properties:
            Path: /movies/{id}
            Method: GET

  GetCategoriesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetCategoriesFunction
      Handler: lambdas/category/getCategories.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetCategoriesApi:
          Type: Api
          Properties:
            Path: /categories
            Method: GET

  GetCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetCategoryFunction
      Handler: lambdas/category/getCategory.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetCategoryApi:
          Type: Api
          Properties:
            Path: /categories/{id}
            Method: GET

  PostCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PostCategoryFunction
      Handler: lambdas/category/postCategory.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        PostCategoryApi:
          Type: Api
          Properties:
            Path: /categories
            Method: POST

  PutCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutCategoryFunction
      Handler: lambdas/category/putCategory.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetCategoryApi:
          Type: Api
          Properties:
            Path: /categories
            Method: PUT

  DeleteCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DeleteCategoryFunction
      Handler: lambdas/category/deleteCategory.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetCategoryApi:
          Type: Api
          Properties:
            Path: /categories/{id}
            Method: DELETE

  Authorizer: 
    Type: AWS::ApiGateway::Authorizer
    Properties: 
      AuthorizerCredentials: 
        Fn::GetAtt: 
          - "LambdaInvocationRole"
          - "Arn"
      AuthorizerResultTtlInSeconds: "300"
      AuthorizerUri: "arn:aws:lambda:us-west-2:096708743200:function:Authorizer"
      Type: "TOKEN"
      IdentitySource: "Authorization"
      Name: "DefaultAuthorizer"
      RestApiId: 
        Ref: "RestApi"
