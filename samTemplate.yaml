---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Outputs the time

Description:
  Creates a Cognito User Pool for the Wild Rydes serverless web application workshop

Resources:

  GetCategoriesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetCategoriesFunction
      Handler: lambdas/category/getCategories.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess

  GetCategoriesFunctionPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetCategoriesFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:"
            - !Ref AWS::Region
            - ":"
            - !Ref AWS::AccountId
            - ":"
            - !Ref GiftAppApi
            - "/*"

  GetCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetCategoryFunction
      Handler: lambdas/category/getCategory.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess

  
  GetCategoryFunctionPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetCategoryFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:"
            - !Ref AWS::Region
            - ":"
            - !Ref AWS::AccountId
            - ":"
            - !Ref GiftAppApi
            - "/*"


  PostCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PostCategoryFunction
      Handler: lambdas/category/postCategory.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess

  
  PostCategoryFunctionPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref PostCategoryFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:"
            - !Ref AWS::Region
            - ":"
            - !Ref AWS::AccountId
            - ":"
            - !Ref GiftAppApi
            - "/*"



  PutCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutCategoryFunction
      Handler: lambdas/category/putCategory.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess


  PutCategoryFunctionPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref PutCategoryFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:"
            - !Ref AWS::Region
            - ":"
            - !Ref AWS::AccountId
            - ":"
            - !Ref GiftAppApi
            - "/*"


  DeleteCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DeleteCategoryFunction
      Handler: lambdas/category/deleteCategory.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess


  DeleteCategoryFunctionPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DeleteCategoryFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:"
            - !Ref AWS::Region
            - ":"
            - !Ref AWS::AccountId
            - ":"
            - !Ref GiftAppApi
            - "/*"
  
   
  ProductsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Products
      AttributeDefinitions:
        -
          AttributeName: categoryId
          AttributeType: S
        -
          AttributeName: title
          AttributeType: S
      KeySchema:
        -
          AttributeName: categoryId
          KeyType: HASH

        -
          AttributeName: title
          KeyType: "RANGE"

      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  CategoriesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Categories
      AttributeDefinitions:
        -
          AttributeName: id
          AttributeType: N
        -
          AttributeName: title
          AttributeType: S
      KeySchema:
        -
          AttributeName: id
          KeyType: HASH
        -
          AttributeName: title
          KeyType: RANGE

      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  GiftAppApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: GiftApp
      Body:
        swagger: 2.0
        info:
          version: 1.0.0
          title: GiftApp
        paths:
          /categories:
            get:
              description: get all  categories
              consumes:
                - application/json
              produces:
                - application/json

              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                uri: 
                  Fn::Join:
                    - ""
                    - - "arn:aws:apigateway:"
                      - !Ref AWS::Region
                      - ":lambda:path/2015-03-31/functions/"
                      - !GetAtt GetCategoriesFunction.Arn
                      - "/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"

            post:
              description: create a new categories
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - CognitoAuthorizer: []
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                uri: 
                  Fn::Join:
                    - ""
                    - - "arn:aws:apigateway:"
                      - !Ref AWS::Region
                      - ":lambda:path/2015-03-31/functions/"
                      - !GetAtt PostCategoryFunction.Arn
                      - "/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"

            put:
              description: update an existing categories
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - CognitoAuthorizer: []
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                uri: 
                  Fn::Join:
                    - ""
                    - - "arn:aws:apigateway:"
                      - !Ref AWS::Region
                      - ":lambda:path/2015-03-31/functions/"
                      - !GetAtt PutCategoryFunction.Arn
                      - "/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "PUT"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"

            options:
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"

          /categories/{id}:
            get:
              description: get a  category
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                uri: 
                  Fn::Join:
                    - ""
                    - - "arn:aws:apigateway:"
                      - !Ref AWS::Region
                      - ":lambda:path/2015-03-31/functions/"
                      - !GetAtt GetCategoryFunction.Arn
                      - "/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "GET"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"

            delete:
              description: delete a  category
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - CognitoAuthorizer: []
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                uri: 
                  Fn::Join:
                    - ""
                    - - "arn:aws:apigateway:"
                      - !Ref AWS::Region
                      - ":lambda:path/2015-03-31/functions/"
                      - !GetAtt DeleteCategoryFunction.Arn
                      - "/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "DELETE"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"

            options:
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"

        securityDefinitions:
          CognitoAuthorizer:
            type: "apiKey"
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: cognito_user_pools
            x-amazon-apigateway-authorizer:
              providerARNs:
                - arn:aws:cognito-idp:us-west-2:096708743200:userpool/us-west-2_5gJIOEzFy
              type: "cognito_user_pools"
 

  GiftAppApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: Prod deployment for Gift APP API
      RestApiId: !Ref GiftAppApi
      StageName: prod         


