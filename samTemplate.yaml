AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Outputs the time

Globals:

  Function:
    Runtime: nodejs8.10

    Environment:
      Variables:
        APP_NAME: GiftApp

  Api:
    # enable CORS; to make more specific, change the origin wildcard
    # to a particular domain name, e.g. "'www.example.com'"
    # Cors:
    #  AllowMethods: "'*'"
    #  AllowHeaders: "'*'"
    #  AllowOrigin: "'*'"
    #Cors: "'http://localhost:3000'"
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"

    EndpointConfiguration: REGIONAL


Resources:


  HelloFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: HelloLambdaFunction
      Handler: hello.handler
      Runtime: nodejs8.10
      CodeUri: ./
      Policies: AmazonDynamoDBFullAccess
      Events:
        HelloGetApi:
          Type: Api
          Properties:
            Path: /hello
            Method: GET
        HelloPostApi:
          Type: Api
          Properties:
            Path: /hello
            Method: POST
        HelloPutApi:
          Type: Api
          Properties:
            Path: /hello
            Method: PUT
        HelloDeleteApi:
          Type: Api
          Properties:
            Path: /hello
            Method: DELETE
            
  GetMoviesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetMoviesFunction
      Handler: lambdas/movies/getMovies.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetMoviesApi:
          Type: Api
          Properties:
            Path: /movies
            Method: GET

  GetMovieFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetMovieFunction
      Handler: lambdas/movies/getMovie.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetMovieApi:
          Type: Api
          Properties:
            Path: /movies/{id}
            Method: GET

  GetCategoriesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetCategoriesFunction
      Handler: lambdas/category/getCategories.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetCategoriesApi:
          Type: Api
          Properties:
            Path: /categories
            Method: GET

  GetCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetCategoryFunction
      Handler: lambdas/category/getCategory.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetCategoryApi:
          Type: Api
          Properties:
            Path: /categories/{id}
            Method: GET

  PostCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PostCategoryFunction
      Handler: lambdas/category/postCategory.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        PostCategoryApi:
          Type: Api
          Properties:
            Path: /categories
            Method: POST

  PutCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutCategoryFunction
      Handler: lambdas/category/putCategory.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetCategoryApi:
          Type: Api
          Properties:
            Path: /categories
            Method: PUT

  DeleteCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DeleteCategoryFunction
      Handler: lambdas/category/deleteCategory.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetCategoryApi:
          Type: Api
          Properties:
            Path: /categories/{id}
            Method: DELETE

  CustomAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs8.10
      Handler: lambdas/authorizers/custom-auth.handler
      CodeUri: ./src
      Role:
        Fn::Sub: ${CustomAuthorizerFunctionRole.Arn}

  CustomAuthorizerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  ApiGatewayAuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "apigateway.amazonaws.com"
            Action: 
              - sts:AssumeRole
      Policies: 
        - 
          PolicyName: "InvokeAuthorizerFunction"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action:
                  - lambda:InvokeAsync
                  - lambda:InvokeFunction
                Resource:
                  Fn::Sub: ${CustomAuthorizerFunction.Arn}


  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        swagger: "2.0"
        info:
          title: Prod
          description: My API that uses custom authorizer
          version: 1.0.0
        securityDefinitions:
          CustomAuthorizer:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: custom
            x-amazon-apigateway-authorizer:
              type: token
              authorizerUri:
                Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CustomAuthorizerFunction.Arn}/invocations
              authorizerCredentials:
                Fn::Sub: ${ApiGatewayAuthorizerRole.Arn}
              authorizerResultTtlInSeconds: 60
              
        paths:
          "/somepath":
            post:
              security:
                - CustomAuthorizer: []